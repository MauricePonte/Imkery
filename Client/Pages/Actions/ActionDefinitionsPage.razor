@page "/actiondefinitions"

@using Imkery.Entities
@attribute [Authorize]

<MudIconButton Class="ma-3" Icon="@Icons.Material.Filled.Add" Variant="Variant.Filled" Size="Size.Small" Color="Color.Primary" @onclick="@AddItem">@Resources.Actions_Add</MudIconButton>

@if (ActionDefinitions != null)
{
    @foreach (var actionDefinition in ActionDefinitions)
    {
        <MudCard Class="ma-3">
            <MudCardContent>
                <MudText>@actionDefinition.Name</MudText>
                <MudText Typo="Typo.body2">@actionDefinition.Description</MudText>
            </MudCardContent>
            <MudCardActions>
               <MudIconButton Class="ma-1" Icon="@Icons.Material.Filled.Edit" Variant="Variant.Filled" Size="Size.Small" Color="Color.Primary" Href="@("actiondefinition/" + actionDefinition.Id.ToString())">@Resources.Actions_Edit</MudIconButton>
              <MudIconButton Class="ma-1" Icon="@Icons.Material.Filled.Delete" Variant="Variant.Filled" Size="Size.Small" Color="Color.Primary" @onclick="@(async () => await DeleteItem(actionDefinition))">@Resources.Actions_Delete</MudIconButton>
            </MudCardActions>
        </MudCard>
    }
}

@code {

    [Inject]
    public ActionDefinitionsClient ActionDefinitionsClient { get; set; }

    [Inject]
    public NavigationManager NavigationManager { get; set; }
    [Inject]
    private IDialogService DialogService { get; set; }
    public ICollection<ActionDefinition> ActionDefinitions { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            ActionDefinitions = await ActionDefinitionsClient.GetCollectionAsync(new FilterPagingOptions() { Page = 0, ItemsPerPage = int.MaxValue, Includes = new string[] { } });
            StateHasChanged();
        }
    }

    public void AddItem()
    {
        NavigationManager.NavigateTo("actiondefinition");
    }

    public async Task<bool> DeleteItem(ActionDefinition item)
    {
        bool? result = await DialogService.ShowMessageBox(
         Resources.Actions_Delete,
        string.Format(Resources.Dialog_DeleteQuestion,item.GetDescription()),
         yesText: Resources.Dialog_Yes, cancelText: Resources.Dialog_No);
        if (result.HasValue && result.Value)
        {
            await ActionDefinitionsClient.DeleteAsync(item.Id);
            ActionDefinitions.Remove(item);
            return true;
        }
        return false;
    }
}
